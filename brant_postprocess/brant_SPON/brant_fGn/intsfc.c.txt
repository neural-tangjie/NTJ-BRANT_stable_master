#include "mex.h"
#include <stdio.h>
#include <math.h>
#define PI 3.1415926

void mexFunction(int nlhs,mxArray *plhs[],
                  int nrhs,const mxArray *prhs[])
{
    double *a,*b,*dt,*H,*m,*y;
    double t1,t2,t3,s1,s2,s3,temp1,temp2,temp;
    double Sf,h,r,*f;
    int i,j,N;
   
    if(nrhs!=5)
        mexErrMsgTxt("Five input required.");
    else if(nlhs>2)
        mexErrMsgTxt("Too many output arguments.");
    if((!mxIsDouble(prhs[0])||mxIsComplex(prhs[0]))||
    	(!mxIsDouble(prhs[1])||mxIsComplex(prhs[1]))||
    	(!mxIsDouble(prhs[2])||mxIsComplex(prhs[2]))||
    	(!mxIsDouble(prhs[3])||mxIsComplex(prhs[3]))||
    	(!mxIsDouble(prhs[4])||mxIsComplex(prhs[4])))
        mexErrMsgTxt("Input must be double.");
        
    plhs[0]=mxCreateDoubleMatrix(1,1,mxREAL);
    
    a=mxGetPr(prhs[0]);
    b=mxGetPr(prhs[1]);
    m=mxGetPr(prhs[2]);
    dt=mxGetPr(prhs[3]);
    H=mxGetPr(prhs[4]);
    
    y=mxGetPr(plhs[0]);
  
    h=b[0]-a[0];
//     N0[0]=N0[0]+0.5;
    N=1;
    while(h>dt[0])
    {
    	N=N*2;
    	h=h/2;
    }
    h=2*h;
    N=N/2;
    
    f=(double*)mxCalloc(N,sizeof(double));
    for(i=0;i<N;i++)
        f[i]=a[0]+i*h+h/2;
    
    y[0]=0;
    r=-2*H[0]-1;
    
   t1=0;
   t2=0;
   t3=0;
   
   temp1=0;
   temp2=0;
   temp=0;
   
   
    for(i=0;i<N;i++)
      { 
         t1=PI*f[i];
         s1=sin(t1);
         Sf=pow(f[i],r);
        for(j=1;j<m[0];j++)
        {   
            t2=f[i]+j;
            t3=f[i]-j;
            if(t3<0)
                t3=-t3;
            s2=pow(t2,r);
            s3=pow(t3,r);
             
        	Sf=Sf+s2+s3;
        } 
         temp1=m[0]/(-r-1)+0.5-r/(12*m[0]);
         if(temp1<0)
             temp1=-temp1;
         temp2=r*(-r+1)*(-r+2)/(720*pow(m[0],-r+3));
         temp=pow(m[0],r)*temp1+temp2;
        y[0]=y[0]+(Sf+2*temp)*s1*s1;
      }
       y[0]=log(y[0])*h;
       mxFree(f);
       return;  
       
}
