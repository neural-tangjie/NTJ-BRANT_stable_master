function [process_pars, ui_structs, process_fun] = brant_postprocess_defaults(process_str)

brant_path = fileparts(which('brant'));

bn_atlas = fullfile(brant_path, 'template', 'BN_Atlas_274_with_cerebellum_without_255.nii.gz');
bn_atlas_info = fullfile(brant_path, 'template', 'BN_Atlas_274_subregion_name.txt');
if (exist(bn_atlas, 'file') ~= 2)
    bn_atlas = '';
    bn_atlas_info = '';
end

% string, ui_type, structure field.
% write cases in lower case
switch(lower(process_str))
    case 'circos'
        
        circos_dir = '';
        if (ispc == 1)
            [ret, str] = system('where circos.exe');
        else
            [ret, str] = system('which circos');
        end
        
        if (ret == 0)
            circos_dir = fileparts(str);
        end
        
        process_pars.circos_dir = {circos_dir};
        process_pars.conf_dir = {fullfile(brant_path, 'circos')};
        process_pars.roi_info = {''};
        process_pars.edge = {''};
%         process_pars.chromo_units = 100000;
        process_pars.pos_color = [1, 0, 0];
        process_pars.neg_color = [0, 1, 1];
        process_pars.transparent_bkg = 0;
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'edit', 'str_dir'},     'circos dir',     {'circos_dir'},      '';...
            {'edit', 'str_dir'},     'conf dir',    {'conf_dir'},              '';...
            {'edit', 'str_edge'},    'roi info',    {'roi_info'},              '';...
            {'edit', 'str_edge'},    'edge',    {'edge'},              '';...
            ...{'edit', 'num_short_right'},       'chromosome units',            {'chromo_units'},               '';...
            {'pushbutton', 'color_hor_dual'},        {'positive edge', 'negative edge'},   {{''}, {'pos_color'}, {''}, {'neg_color'}},                          '';...
            {'chb', 'num_bin'},          'transparent background',   {'transparent_bkg'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_circos_conf;
    
    case 'normalise'
        
        process_pars.norm_ind = 1;
        process_pars.fwd_deform_ind = 1;
        process_pars.fwd_deform_filetypes = '';
        process_pars.fwd_resolution = [3,3,3];
        process_pars.inv_deform_ind = 1;
        process_pars.inv_deform_ref = '';
        process_pars.inv_deform_file = {bn_atlas};
        
        ui_structs = {...
            {'chb', 'num_bin'},          'normalise source to template (spm12)',   {'norm_ind'},                          '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', '*.nii'}, {'nm_pos', 1}, {'mask', '', 'disable'}},              '';...
            {'chb', 'num_bin'},          'forward deformation (individual to mni)',   {'fwd_deform_ind'},                          '';...
            {'edit', 'str_long_right'}, 'filetypes',   {'fwd_deform_filetypes'},                 '';...
            {'edit', 'num_short_right'},      'target resolution',          {'fwd_resolution'},              '';...
            {'chb', 'num_bin'},          'inverse deformaiton (mni to individual)',   {'inv_deform_ind'},                          '';...
            {'edit', 'str_long_right'}, 'ref filetype',   {'inv_deform_ref'},                 '';...
            {'edit', 'str_nifti'},       'file in mni',         {'inv_deform_file'},             '';...
            };
        
        process_fun = @brant_normalise_batch;
    case 'diffusionkit'
        
        if (ispc == 1)
            [ret, str] = system('where bnviewer.exe');
        else
            [ret, str] = system('which bnviewer');
        end
        
        dk_dir = '';
        if (ret == 0)
            dk_dir = fileparts(str);
        end
        
        process_pars.dk_dir = {dk_dir};
        process_pars.eddy_ind = 1;
        process_pars.recon_dti_ind = 1;
        process_pars.DTI_trk_ind = 1;
        process_pars.hardi_odf_ind = 0;
        process_pars.hardi_fod_ind = 0;
        
        ui_structs = {...
            {'edit', 'str_dir'},     'D.K. dir',     {'dk_dir'},      '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', '*.nii'}, {'nm_pos', 1}, {'mask', '', 'disable'}},              '';...
            {'chb', 'num_bin'},          'eddy correction',   {'eddy_ind'},                          '';...
            {'chb', 'num_bin'},          'reconstruction -- DTI',   {'recon_dti_ind'},                          '';...
            {'chb', 'num_bin'},          'tracking -- DTI',   {'DTI_trk_ind'},                          '';...]
            {'chb', 'num_bin'},          'reconstruction -- HARDI (ODF)',   {'hardi_odf_ind'},                          '';...
            {'chb', 'num_bin'},          'reconstruction -- HARDI (FOD)',   {'hardi_fod_ind'},                          '';...
            };
        
        process_fun = @brant_dwi_batch;
        
    case 'reslice'
        
        process_pars.ref = {''};
        process_pars.out_prefix = 'r';
        process_pars.out_ind_del = 0;
        process_pars.out_dir_del = {''};
        
        ui_structs = {...
            {'edit', 'str_nifti'},       'reference',         {'ref'},             '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'mask', '', 'disable'}},              '';...
            {'edit', 'str_short_right'}, 'output prefix',   {'out_prefix'},                 '';...
            {'chb', 'num_bin'},          'output to another directory',   {'out_ind_del'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir_del'},      '';...
            };
        
        process_fun = @brant_reslice_batch;
        
    case 'head motion est'
        
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_2d_txt'},      'input_nifti',       {{'filetype', 'rp*.txt'}, {'nm_pos', 1}},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_hm_est;
        
    case 'dicom convert'
        process_pars.convert = 1;
        process_pars.delete = 0;
        process_pars.par_workers_cvt = 0;
        process_pars.del_ind_cvt = 1;
        process_pars.del_N_cvt = 10;
        process_pars.cvt4d_cvt = 1;
        process_pars.out_dir_cvt = {''};
        process_pars.filetype_cvt = '*.nii';
        
        process_pars.del_N_del = 10;
        process_pars.out_ind_del = 0;
        process_pars.out_fn_del = 'brant_4D';
        process_pars.out_dir_del = {''};
        
        ui_structs = {...
            {'radio', 'hor_txt'},   'operation',               {{'convert', 'delete'}},                          '';...
            {'edit', 'num_short_right'},      'parallel workers',       {'par_workers_cvt'},              '';...
            {'chb', 'num_bin'},          'convert to 4d',   {'cvt4d_cvt'},                          '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_dcm_cvt',       {{'mask', '', 'disable'},{'is4d', [], 'disable'},{'filetype','','disable'}},              '';...
            {'chb', 'num_bin'},          'delete first N timepoints',   {'del_ind_cvt'},                          '';...
            {'edit', 'num_short_right'},      'N',       {'del_N_cvt'},              '';...
            {'edit', 'str_filetype_nifti'},       'filetype',           {'filetype_cvt'},             '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir_cvt'},      '';...
            ...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti_del',       {{'mask', '', 'disable'}},              '';...
            {'edit', 'num_short_right'},      'del first timepoints',       {'del_N_del'},              '';...
            {'edit', 'str_short_right'}, 'output fn',   {'out_fn_del'},                 '';...
            {'chb', 'num_bin'},          'output to another directory',   {'out_ind_del'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir_del'},      '';...
            };
        
         process_fun = @brant_dicom2nii;
         
    case 'gzip/gunzip files'    
        process_pars.gzip = 1;
        process_pars.gunzip = 0;
        process_pars.del_ind = 1;
        process_pars.out_ind = 0;
        process_pars.out_dir = {''};
        
        ui_structs = {...
                    {'radio', 'hor_txt'},   'operation',               {{'gzip', 'gunzip'}},                          '';...
                    {'sub_gui', 'disp_dirs_nii_mask'},'input_gzip',       {{'mask', '', 'disable'}, {'is4d', [], 'disable'}},              '';...
                    {'sub_gui', 'disp_dirs_nii_mask'},'input_gunzip',       {{'mask', '', 'disable'}, {'filetype', '*.nii.gz'}, {'is4d', [], 'disable'}},              '';...
                    {'chb', 'num_bin'},                 'delete gzipped/gunzipped files',   {'del_ind'},                          '';...
                    {'chb', 'num_bin'},                 'output to another directory',   {'out_ind'},                          '';...
                    {'edit', 'str_dir'},                'out dir',     {'out_dir'},      '';...
                    };
        process_fun = [];
        
    case 'visual check'
        ...process_pars.num_chk = 1;
        process_pars.ortho_view_ind = 1;
        process_pars.mask_color = 'Red blobs';
        ...process_pars.view = 'axial';
        process_pars.slices = [31,43,25];
        process_pars.out_dir = {''};
        
        ui_structs = {...
                    {'sub_gui', 'disp_dirs_nii_mask'},'input_nifti',       {{'filetype', 'wra*.nii'}},'';...
                    {'chb', 'num_bin'},          'display orthogonal view',   {'ortho_view_ind'},                          '';...
                    ...{'edit', 'num_short_right'},      'start subject',       {'num_chk'},              '';...
                    {'popupmenu', 'disp_view_opts'},'mask color',             {{{'mask_color'};'Red blobs';'Yellow blobs';'Green blobs';'Cyan blobs';'Blue blobs';'Magenta blobs'}},        	'';...
                    ...{'popupmenu', 'disp_view_opts'},'view',             {{{'view'};'axial';'sagital';'coronal'}},        	'';...
                    {'edit', 'num_longest'},      'slices',       {'slices'},              '';...
                    {'edit', 'str_dir'},                'out dir',     {'out_dir'},      '';...
                    };
        
        process_fun = @brant_visual_check;
        
    case 'tsnr'
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 'wra*.nii'}},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_tsnr;
        
    case {'draw rois'}
        process_pars.sphere = 1;
        process_pars.cube = 0;
        process_pars.mm = 1;
        process_pars.voxel = 0;
        process_pars.radius = 5;
        process_pars.manual = 1;
        process_pars.file = 0;
        process_pars.coords = '';
        process_pars.coords_file = {''};
        process_pars.mask_roi = 0;
        process_pars.aio = 1;
        process_pars.mask = {''};
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'radio', 'hor_txt'}, 'type',               {{'sphere', 'cube'}},                          '';...
            {'radio', 'hor_txt'}, 'unit',               {{'mm', 'voxel'}},                          '';...
            {'edit', 'num_short_right'},      'radius',       {'radius'},              '';...
            {'radio', 'hor_txt'}, 'input type',               {{'manual', 'file'}},                          '';...
            {'edit', 'num_coords'},      'Coordinates (mm)',          {'coords'},              '';...
            {'edit', 'disp_coordinates'},  'Coordinates in txt or csv file',   {'coords_file'},                 '';...
            {'chb', 'num_bin'},          'mask roi afterwards',   {'mask_roi'},                          '';...
            {'chb', 'num_bin'},          'output to one roi file',   {'aio'},                          '';...
            {'edit', 'str_nifti'},       'ref&mask',         {'mask'},             '';...
            {'edit', 'str_dir'},         'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_draw_rois;
        
    case 'merge/extract rois'
        process_pars.merge = 1;
        process_pars.extract = 0;
        process_pars.rois = {bn_atlas};
        process_pars.roi_info = {bn_atlas_info};
        process_pars.roi_vec = [];
        process_pars.out_fn = 'brant_merge_roi';
        process_pars.out_dir = {''};
        process_pars.out2single = 1;
        
        ui_structs = {...
            {'radio', 'hor_txt'},   'operation',               {{'merge', 'extract'}},                          '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi index*',    {'roi_info'},              '';...
            {'edit', 'num_longest'},       'roi vector',    {'roi_vec'},              '';...
            {'chb', 'num_bin'},          'output to single file',   {'out2single'},                          '';...
            {'sub_gui', 'stat_3d_nifti_mask'},      'input_nifti',       {{'mask', '', 'disable'}},              '';...
            {'edit', 'str_long_left'},     'out fn',     {'out_fn'},      '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_mer_ext_rois;
        
    case {'extract value'}
        process_pars.matrix = 0;
        process_pars.sym_ind = 1;
        process_pars.volume = 1;
        process_pars.rois = {''};
        process_pars.roi_info = {''};
        process_pars.roi_index = {''};
        process_pars.corr_mask = {''};
        process_pars.subj_prefix = '_corr_z;_corr_r';
        process_pars.ASCII = 0;
        process_pars.binary = 1;
        process_pars.out_dir = {''};
        process_pars.out_prefix = '';
        
        ui_structs = {...
            {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi index*',    {'roi_index'},              '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'is4d', [], 'disable'}, {'nm_pos', 0}},              '';...
            {'chb', 'num_bin'},          'symmetric matrix',   {'sym_ind'},                          '';...
            {'edit', 'str_edge'},       'corr mask*',    {'corr_mask'},              '';...
            {'edit', 'str_edge'},       'roi info*',    {'roi_info'},              '';...
            {'sub_gui', 'disp_2d_txt'},      'input_matrix',       '',              '';...
            {'edit', 'str_short_right'}, 'string removal*',   {'subj_prefix'},                 '';...
            {'radio', 'hor_txt'},   'output as',               {{'ASCII', 'binary'}},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_extract_mean;
    
    case {'roi signal calculation'}
        process_pars.roi_wise = 1;
        ...process_pars.vox_wise = 0;
        process_pars.ext_mean = 1;
        process_pars.roi2roi = 1;
        process_pars.roi2wb = 1;
        process_pars.partialcorr = 0;
        ...process_pars.pearsoncorr = 1;
        process_pars.rois = {bn_atlas};
        process_pars.roi_info = {bn_atlas_info};
        process_pars.roi_thres = 0;
        process_pars.sm_ind = 1;
        process_pars.fwhm = [6, 6, 6];
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'chb', 'num_bin'},       'check: roi-wise | uncheck: voxel-wise',          {'roi_wise'},              '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi index*',    {'roi_info'},              '';...
            {'edit', 'num_short_right'},       'clustersize thr*',            {'roi_thres'},               '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 'f*.nii'}},              '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},       'extract mean',          {'ext_mean'},              '';...
            {'chb', 'num_bin'},       'roi to roi correlation',         {'roi2roi'},             '';...
            {'chb', 'num_bin'},       'roi to whole brain correlation',         {'roi2wb'},             '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},       'Partial correlation',         {'partialcorr'},             '';...
            ...{'radio', 'vert_two'}, {'Pearson''s correlation', 'Partial correlation'},               {'pearsoncorr', 'partialcorr'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},                'smooth results',   {'sm_ind'},                          '';...
            {'edit', 'num_short_right'},      'smooth kernel size',          {'fwhm'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_roi_script;
        
    case {'roi calculation'}
        process_pars.roi_wise = 1;
        ...process_pars.vox_wise = 0;
        process_pars.ext_mean = 1;
        process_pars.roi2roi = 1;
        process_pars.roi2wb = 1;
        process_pars.partialcorr = 0;
        ...process_pars.pearsoncorr = 1;
        process_pars.rois = {bn_atlas};
        process_pars.roi_info = {bn_atlas_info};
        process_pars.roi_thres = 0;
        process_pars.sm_ind = 1;
        process_pars.fwhm = [6, 6, 6];
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'chb', 'num_bin'},       'check: roi-wise | uncheck: voxel-wise',          {'roi_wise'},              '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi index*',    {'roi_info'},              '';...
            {'edit', 'num_short_right'},       'clustersize thr*',            {'roi_thres'},               '';...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 'f*.nii'}},              '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},       'extract mean',          {'ext_mean'},              '';...
            {'chb', 'num_bin'},       'roi to roi correlation',         {'roi2roi'},             '';...
            {'chb', 'num_bin'},       'roi to whole brain correlation',         {'roi2wb'},             '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},       'Partial correlation',         {'partialcorr'},             '';...
            ...{'radio', 'vert_two'}, {'Pearson''s correlation', 'Partial correlation'},               {'pearsoncorr', 'partialcorr'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},                'smooth results',   {'sm_ind'},                          '';...
            {'edit', 'num_short_right'},      'smooth kernel size',          {'fwhm'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_roi_script;
        
    case 'fcd/fcs'
        process_pars.time_series = '';
        process_pars.cpu = 0;
        process_pars.gpu = 1;
        process_pars.threshold_corr = 0.6;
        process_pars.metrics = 'fcd';
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'mask', {fullfile(brant_path, 'template', 'mask_gm_40.nii.gz')}}, {'filetype', 'f*.nii'}},              '';...
            {'edit', 'str_thr_parse'},     'time series',      {'time_series'},                          '';...
            {'radio', 'hor_txt'},   'compute',               {{'cpu', 'gpu'}},                          '';...
            {'edit', 'num_short_right'},      'r threshold',       {'threshold_corr'},              '';...
            {'popupmenu_right', 'disp_view_opts'},      'metrics',    {{{'metrics'};'fcd';'fcs';'abs fcs'}},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_fcd;
        
    case 'threshold estimation'
        process_pars.thres_int = 0.3:0.01:0.6;
        process_pars.use_abs_ind = 1;
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'stat_2d_txt'},      'input_matrix',       '',              '';...
            {'chb', 'num_bin'},       'use absolute value of input matrics',         {'use_abs_ind'},             '';...
            {'seperator', 'str'}, '============ thresholds ============', '', '';...
            {'edit', 'num_short_right'},      'intensity threshold',       {'thres_int'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_thres_est;
        
    case 'network calculation'
        process_pars.par_workers = 0;
        process_pars.thres_int_bin = 1;
        process_pars.thres_int = 0.3:0.01:0.6;
        process_pars.matrix_type = 'binarized network';
        process_pars.use_abs_ind = 1;
        process_pars.thres_spar_bin = 1;
        process_pars.thres_spar = 0.05:0.01:0.2;
        process_pars.mst = 1;
        process_pars.net_calcs = brant_net_measure_defaults;
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'edit', 'num_short_right'},      'parallel workers',       {'par_workers'},              '';...
            {'sub_gui', 'stat_2d_txt'},      'input_matrix',       '',              '';...
            {'chb', 'num_bin'},       'use absolute value of input matrics',         {'use_abs_ind'},             '';...
            {'seperator', 'str'}, '============ thresholds ============', '', '';...
            {'chb', 'num_bin'},       'thresholds of matrix intensity',         {'thres_int_bin'},             '';...
            {'edit', 'num_short_right'},      'intensity threshold',       {'thres_int'},              '';...
            {'chb', 'num_bin'},       'thresholds of sparsity',         {'thres_spar_bin'},             '';...
            {'edit', 'num_short_right'},      'sparsity threshold',       {'thres_spar'},              '';...
            {'chb', 'num_bin'},       'Minimun Spanning Tree',         {'mst'},             '';...
            {'seperator', 'str'}, '======== thresholded network ========', '', '';...
            {'popupmenu_right', 'disp_view_opts'},      'matrix type',    {{{'matrix_type'};'binarized network';'weighted network'}},              '';...
            {'edit', 'disp_net_calcs'}, 'Network Properties',   {'net_calcs'},                 '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_net_calc;
        
    case 'network statistics'
        
        process_pars.stat_type = 'two sample t-test';
        process_pars.grp_stat = 'grp1,grp2';
        
        process_pars.discard_bad_subj = 1;
        process_pars.regr_strs = '';
        process_pars.grp_filter = '';
        process_pars.subj_prefix = '';
        process_pars.regressors_tbl = {''};
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_2d_mat'},      'input_matrix',       '',              '';...
            {'popupmenu_right', 'disp_view_opts'},      'stat type',    {{{'stat_type'};'two sample t-test';'paired t-test'}},              '';...
            {'edit', 'str_long_right'}, 'group(s)',   {'grp_stat'},                 '';...
            {'seperator', 'str'}, '=========== grouping info ===========', '', '';...
            {'edit', 'str_csv'},  'table',   {'regressors_tbl'},                 '';...
            {'edit', 'str_short_right'}, 'string removal*',   {'subj_prefix'},                 '';...
            {'edit', 'str_long_right'},        'regressors*',   {'regr_strs'},                 '';...
            ...{'edit', 'str_long_right'},          'filter*',   {'grp_filter'},                          '';...
            {'chb', 'num_bin'},          'discard subjects without info',   {'discard_bad_subj'},                          '';...
            {'edit', 'str_dir'},     'out dir',        {'out_dir'},      '';...
            };
        
        process_fun = @brant_stat;
        
    case 'am'
        ...process_pars.timepoint = 0;
        process_pars.nor = 1;
        process_pars.time_series = '';
        process_pars.am = 1;
        process_pars.std = 1;
        process_pars.var = 1;
        process_pars.sm_ind = 1;
        process_pars.fwhm = [6, 6, 6];
        process_pars.out_dir = {''};
        
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 'f*.nii'}, {'nm_pos', 1}},              '';...
            ...{'edit', 'num_short_right'},      'check timepoint',          {'timepoint'},              '';...
            {'edit', 'str_thr_parse'},     'time series',      {'time_series'},                          '';...
            {'chb', 'num_bin'},                 'mean temporal ampilitude',   {'am'},                          '';...
            {'chb', 'num_bin'},                 'standard deviation',   {'std'},                          '';...
            {'chb', 'num_bin'},                 'variation',   {'var'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},                'normalise transform',   {'nor'},                          '';...
            {'chb', 'num_bin'},                'smooth results',   {'sm_ind'},                          '';...
            {'edit', 'num_short_right'},      'smooth kernel size',          {'fwhm'},              '';...
            {'edit', 'str_dir'},               'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_am;
        
    case 'fgn'
        ...process_pars.timepoint = 0;
        process_pars.nor = 1;
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 's*.nii'}, {'nm_pos', 1}},              '';...
            ...{'edit', 'num_short_right'},      'check timepoint',          {'timepoint'},              '';...
            {'chb', 'num_bin'},          'normalise transform',   {'nor'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''
            };
        
        process_fun = @brant_fgn;
        
    case 'reho'
        process_pars.time_series = '';
        process_pars.neighbour_num = 26;
        process_pars.nor = 1;
        process_pars.sm_ind = 1;
        process_pars.fwhm = [6, 6, 6];
        process_pars.out_dir = {''};        
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},	'input_nifti',          {{'filetype', 'f*.nii'}, {'nm_pos', 1}},	'';...
            {'edit', 'str_thr_parse'},     'time series',      {'time_series'},                          '';...
            {'popupmenu', 'num_neighbours_pts'},'nbr type',             {{'neighbour_num';'6';'18';'26'}},        	'';...
            {'chb', 'num_bin'},                 'normalise transform',  {'nor'},                                    '';...
            {'chb', 'num_bin'},                'smooth results',   {'sm_ind'},                          '';...
            {'edit', 'num_short_right'},      'smooth kernel size',          {'fwhm'},              '';...
            {'edit', 'str_dir'},                'out dir',              {'out_dir'},                                '';...
            };
        process_fun = @brant_reho;
        
    case 'alff/falff'
        ...process_pars.timepoint = 0;
        process_pars.time_series = '';   
        process_pars.tr = 0;
        process_pars.lower_thr = 0.01;
        process_pars.upper_thr = 0.08;
        process_pars.nor = 1;
        process_pars.sm_ind = 1;
        process_pars.fwhm = [6, 6, 6];
        process_pars.out_dir = {''};
        
        ui_structs = {...
            {'sub_gui', 'disp_dirs_nii_mask'},      'input_nifti',       {{'filetype', 'd*.nii'}, {'nm_pos', 1}},              '';...
            ...{'edit', 'num_short_right'},      'check timepoint',    {'timepoint'},              '';...
            {'edit', 'str_thr_parse'},     'time series',      {'time_series'},                          '';...
            {'edit', 'num_short_right'},      'TR',    {'tr'},              '';...
            {'edit', 'num_short_right'},      'lower cutoff (Hz)',    {'lower_thr'},              '';...
            {'edit', 'num_short_right'},      'upper cutoff (Hz)',    {'upper_thr'},              '';...
            {'chb', 'num_bin'},          'normalise transform',   {'nor'},                          '';...
            {'chb', 'num_bin'},                'smooth results',   {'sm_ind'},                          '';...
            {'edit', 'num_short_right'},      'smooth kernel size',          {'fwhm'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        process_fun = @brant_alff;
        
    case {'statistics', 't-tests'}
        
        process_pars.stat_type = 'two sample t-test';
        process_pars.grp_stat = 'grp1,grp2';
        
        process_pars.thr = 0.05;
        process_pars.fdrID = 1;
        process_pars.fdrN = 1;
        process_pars.bonf = 1;
        
        process_pars.discard_bad_subj = 1;
        process_pars.regr_strs = '';
        process_pars.grp_filter = '';
        process_pars.subj_prefix = '';
        process_pars.regressors_tbl = {''};
        
        process_pars.matrix = 1;
        process_pars.volume = 0;
        process_pars.mat_vox2vox = 0; % commented
        process_pars.sym_ind = 1;
        
        process_pars.out_dir = {''};
        
    ui_structs = {...
        {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
        {'seperator', 'str'}, '====== input for matrix or volume ======', '', '';...
        ...{'chb', 'num_bin'},          'data from voxel to voxel corr',   {'mat_vox2vox'},                          '';...
        {'chb', 'num_bin'},          'symmetric matrix',   {'sym_ind'},                          '';...
        {'sub_gui', 'stat_2d_txt'},      'input_matrix',       {{'filetype', '*corr_z.txt'}},              '';...
        {'sub_gui', 'stat_3d_nifti_mask'},      'input_nifti',       '',              '';...
        {'seperator', 'str'}, '=========== grouping info ===========', '', '';...
        {'popupmenu', 'disp_view_opts'},      'stat type',    {{{'stat_type'};'one sample t-test';'two sample t-test';'paired t-test'}},              '';...
        {'edit', 'str_csv'},  'table',   {'regressors_tbl'},                 '';...
        {'edit', 'str_long_right'}, 'group(s)',   {'grp_stat'},                 '';...
        {'edit', 'str_short_right'}, 'string removal*',   {'subj_prefix'},                 '';...
        {'edit', 'str_long_right'},        'regressors*',   {'regr_strs'},                 '';...
        {'edit', 'str_long_right'},          'filter*',   {'grp_filter'},                          '';...
        {'chb', 'num_bin'},          'discard subjects without info',   {'discard_bad_subj'},                          '';...
        {'seperator', 'str'}, '====  multiple comparison correction  ====', '', '';...
        {'edit', 'num_short_right'},      'threshold',    {'thr'},              '';...
        {'chb', 'num_bin_triple_hor'},        {'fdrID', 'fdrN', 'bonf'},   {{'fdrID', 'fdrN', 'bonf'}},                          '';...
        {'edit', 'str_dir'},     'out dir',        {'out_dir'},      ''
        };
    
    process_fun = @brant_stat;
    
    case 'ibma'
        
        process_pars.stouffer = 0;
        process_pars.fisher = 0;
        process_pars.fem = 0;
        process_pars.mem = 1;
        process_pars.friston = 0;
        process_pars.nichols = 0;
        
        process_pars.num_subjs_tbl = {''};
        process_pars.thr = 0.05;
        process_pars.fdrID = 1;
        process_pars.fdrN = 1;
        process_pars.bonf = 1;
        
        process_pars.matrix = 1;
        process_pars.volume = 0;
        
        process_pars.out_dir = {''};
        
        ui_structs = {;...
            {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
            {'edit', 'str_csv'},  'center info',   {'num_subjs_tbl'},                 '';...
            {'sub_gui', 'stat_3d_nifti_mask'},      'input_nifti',       '',              '';...
            {'sub_gui', 'disp_2d_mat'},         'input_matrix',       {{'filetype', 'ttest2*.mat'}},              '';...
            {'seperator', 'str'}, '====  multiple comparison correction  ====', '', '';...
            {'edit', 'num_short_right'},      'threshold',    {'thr'},              '';...
            {'chb', 'num_bin_triple_hor'},        {'fdrID', 'fdrN', 'bonf'},   {{'fdrID', 'fdrN', 'bonf'}},                          '';...
            {'seperator', 'str'}, '=========== IBMA methods ===========', '', '';...
            {'chb', 'num_bin'},          'Stouffer''s z-score',            {'stouffer'},                          '';...
            {'chb', 'num_bin'},          'Fisher''s method',               {'fisher'},                          '';...
            {'chb', 'num_bin'},          'Fixed Effects Model',             {'fem'},                          '';...
            {'chb', 'num_bin'},          'Mixed Effects Model',             {'mem'},                          '';...
            {'chb', 'num_bin'},          'Worsley and Friston''s method',              {'friston'},                          '';...
            {'chb', 'num_bin'},          'Nichols''s method',    {'nichols'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''
            };
        
        process_fun = @brant_ibma;
        
    case 'surface mapping'
        
        process_pars.colorbar = 1;
        process_pars.discrete = 1;
%         process_pars.smooth = 0;
        process_pars.alpha = 1.0;
        process_pars.rad_mm = [];
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.vol_map = {bn_atlas};
        process_pars.material_type = 'shiny';
        process_pars.lighting_type = 'gouraud';
        process_pars.shading_type = 'interp';
        process_pars.mode_display = 'halves:left and right';
        process_pars.colormap = 'jet';
        process_pars.vol_thr = '';
              
        ui_structs = {...
            {'chb', 'num_bin'},       'show colorbar',         {'colorbar'},             '';...
            {'chb', 'num_bin'},       'discrete color',         {'discrete'},             '';...
%             {'chb', 'num_bin'},       'smooth',         {'smooth'},             '';...
            {'edit', 'num_short_left'},      'alpha',    {'alpha'},              '';...
            {'edit', 'num_short_right'},      'max val radius(mm)',    {'rad_mm'},              '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'halves:left lateral';'halves:left medial';'halves:right lateral';'halves:right medial';'halves:left and right';'whole brain:sagital left';'whole brain:sagital right';'whole brain:axial superior';'whole brain:axial inferior';'whole brain:coronal anterior'; 'whole brain:coronal posterior';'whole brain'}},              '';... 
            {'popupmenu', 'disp_view_opts'},      'material',    {{{'material_type'};'shiny';'dull';'metal'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'lighting',    {{{'lighting_type'};'flat';'gouraud';'phong';'none'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'shading',    {{{'shading_type'};'flat';'faceted';'interp'}},              '';...
            {'popupmenu', 'disp_view_opts'},    'colormap',             {{{'colormap'};'AFNI';'AFNI_neg';'AFNI_pos';'autumn';'winter';'spring';'summer';'hot';'cool';'parula';'jet';'hsv'}},       '';...
            {'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'edit', 'str_nifti'},       'brain vol',         {'vol_map'},             '';...
            {'edit', 'str_thr_parse'},     'thr vol',      {'vol_thr'},                          '';...
            };
        
        process_fun = @brant_surface_mapping;
    
    case 'slice mapping'
        
        process_pars.view_angle = 'transverse';
        process_pars.slice_order = 10;
        process_pars.background = {fullfile(brant_path, 'template', 'ch2.nii.gz')};  
        process_pars.vol_map = {fullfile(brant_path, 'template', 'Color.nii.gz')};
        process_pars.white_background = 0; 
        process_pars.only_positive = 0;
        process_pars.only_negative = 0;
        process_pars.expand_range = 0;
        process_pars.colormap = 'jet';
        process_pars.vol_thr = '';
        process_pars.color_title = '';
        
        ui_structs = {...
            {'popupmenu', 'disp_view_opts'},    'view angle',           {{{'view_angle'};'transverse';'coronal';'sagittal'}},       '';... 
            {'edit', 'num_short_left'},         'slice order',          {'slice_order'},  '';...
            {'edit', 'str_nifti'},              'bg',                   {'background'},   '';...
            {'edit', 'str_nifti'},              'brain vol',            {'vol_map'},      '';...
            {'chb', 'num_bin'},                 'white background',     {'white_background'},             '';...
            {'chb', 'num_bin'},                 'only positive',     {'only_positive'},             '';...
            {'chb', 'num_bin'},                 'only negative',     {'only_negative'},             '';...
            {'chb', 'num_bin'},                 'expand display range',     {'expand_range'},             '';...
            {'popupmenu', 'disp_view_opts'},    'colormap',             {{{'colormap'};'autumn';'winter';'spring';'summer';'hot';'cool';'parula';'jet';'hsv'}},       '';...
            {'edit', 'str_thr_parse'},          'thr vol',              {'vol_thr'},      '';...
            {'edit', 'str_thr_parse'},          'col title',            {'color_title'},      '';...
            };
        
        process_fun = @brant_slice_mapping;    
        
    case 'roi mapping'
        
        process_pars.alpha = 0.3;
        process_pars.disp_surface = 1;
        process_pars.disp_legend = 0;
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.rois = {bn_atlas};
        process_pars.roi_vec = [31,32];
        process_pars.roi_info = {bn_atlas_info};
        process_pars.mode_display = 'halves:left and right';
        process_pars.material_type = 'dull';
        process_pars.lighting_type = 'gouraud';
        ...process_pars.shading_type = 'interp';
        process_pars.random = 1;
        process_pars.input = 0;
        process_pars.color_input = {''};
        process_pars.output_color = 0;
        process_pars.out_dir = {'.'};
        
        ui_structs = {...
            {'edit', 'num_short_left'},      'alpha',    {'alpha'},              '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'halves:left lateral';'halves:left medial';'halves:right lateral';'halves:right medial';'halves:left and right';'whole brain:sagital left';'whole brain:sagital right';'whole brain:axial superior';'whole brain:axial inferior';'whole brain:coronal anterior'; 'whole brain:coronal posterior'}},              '';... 
            {'popupmenu', 'disp_view_opts'},      'material',    {{{'material_type'};'shiny';'dull';'metal'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'lighting',    {{{'lighting_type'};'flat';'gouraud';'phong';'none'}},              '';...
            ...{'popupmenu', 'disp_view_opts'},      'shading',    {{{'shading_type'};'flat';'faceted';'interp'}},              '';...
            {'chb', 'num_bin'},        'display surface',   {'disp_surface'},                          '';...
            {'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'chb', 'num_bin'},        'display legend',   {'disp_legend'},                          '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi index*',    {'roi_info'},              '';...
            {'edit', 'num_longest'},       'roi vector',    {'roi_vec'},              '';...
            ...{'chb', 'num_bin_num_edit'},       'spin&save',         {'spin_angle'},             '';...
            {'radio', 'hor_txt'}, 'color',               {{'random', 'input'}},                          '';...
%             {'radio', 'vert_two'}, {'random color', 'input color'},               {'rand_color', 'input_color'},                          '';...
            {'edit', 'str_edge'},       'color file',    {'color_input'},              '';...
            {'chb', 'num_bin'},        'output color',   {'output_color'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
        process_fun = @brant_roi_mapping;
        
    case 'network visualization'
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.alpha = 0.2;
        process_pars.mode_display = 'whole brain:axial superior';
        process_pars.node_txt = {''};
        process_pars.show_label = 1;
        process_pars.node_size = 3;
        process_pars.same_color = 0;
        process_pars.user_color = 1;
        process_pars.color_same = [1, 0, 0];
        process_pars.diff_color = 0;
        process_pars.modules_info = 'module 1';
        process_pars.color_modules = [1, 0, 0];
        process_pars.edge = {''};
        process_pars.edge_disp = 1;
        process_pars.hide_node = 1;
        process_pars.thickness = 1;
        process_pars.adjust_edge_color = 1;
        process_pars.pos_color = [1, 0, 0];
        process_pars.neg_color = [0, 1, 1];
        process_pars.edge_thr = 'edge ~= 0';
        process_pars.wei_rad = 0;
        process_pars.wei_thr = 1;
        
        ui_structs = {{'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'edit', 'num_short_left'},     'alpha',      {'alpha'},                          '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'halves:left lateral';'halves:left medial';'halves:right lateral';'halves:right medial';'halves:left and right';'whole brain:sagital left';'whole brain:sagital right';'whole brain:axial superior';'whole brain:axial inferior';'whole brain:coronal anterior'; 'whole brain:coronal posterior'}},              '';... 
            {'seperator', 'str'}, '========================================', '', '';...
            {'edit', 'str_node'},       'node',         {'node_txt'},             '';...
            {'chb', 'num_bin'},        'show node labels',   {'show_label'},                          '';...
            {'chb', 'num_bin_num_edit'},       'same size',         {'node_size'},             '';...
            {'radio', 'vert_node_color_three'}, {'user defined node color', 'same node color', 'module color'},               {{'user_color'}, {'same_color'}, {'color_same'}, {'diff_color'}, {{'modules_info'}; 'module 1'}, {'color_modules'}},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'edit', 'str_edge'},      'edge',    {'edge'},              '';...
            {'chb', 'num_bin'},        'display edges',   {'edge_disp'},                          '';...
            {'chb', 'num_bin'},        'hide nodes without edge',   {'hide_node'},                          '';...
            {'edit', 'num_short_left'},     'thickness',      {'thickness'},                          '';...
            {'chb', 'num_bin'},        'adjust edge color',   {'adjust_edge_color'},                          '';...
            {'pushbutton', 'color_hor_dual'},        {'positive edge', 'negative edge'},   {{''}, {'pos_color'}, {''}, {'neg_color'}},                          '';...
            {'edit', 'str_thr_parse'},     'threshold',      {'edge_thr'},                          '';...
            {'chb', 'num_bin'},       'use summed weight as node radius',         {'wei_rad'},             '';...
            {'edit', 'num_short_left'},     'threshold',      {'wei_thr'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            };
        
        process_fun = @brant_network_visual;
        
    case 'roi coordinates'
        process_pars.sep_c = 1;
        process_pars.lab_c = 0;
        process_pars.mask_in = {''};
        process_pars.cs_thr = 5;
        process_pars.template_img = {fullfile(brant_path, 'template', 'BN_Atlas_274_with_cerebellum_without_255.nii.gz')};
        process_pars.template_info = {fullfile(brant_path, 'template', 'BN_Atlas_274_subregion_name.txt')};
        process_pars.out_dir = {''};
        
        ui_structs = {;...
            {'radio', 'vert_two'}, {'seperated binary clusters', 'labeled clusters'},               {'sep_c', 'lab_c'},                          '';...
            {'edit', 'str_nifti'},       'mask*',         {'mask_in'},             '';...
            {'edit', 'num_short_right'},     'cluster size',      {'cs_thr'},                          '';...
            {'edit', 'str_nifti'},       'roi file',         {'template_img'},             '';...
            {'edit', 'str_edge'},      'roi info*',    {'template_info'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''};
        
        process_fun = @brant_roi_coordinates;
        
    otherwise
        error('UI parameters for %s are not found!', process_str);
end

[process_pars, ui_structs] = sub_gui_elements_raw(process_pars, ui_structs);

function [process_pars, ui_structs] = sub_gui_elements_raw(process_pars, ui_structs)
% replace ui_struct

ui_types = ui_structs(:, 1);
ui_issub = cellfun(@(x) strcmp(x{1}, 'sub_gui'), ui_types);

if(any(ui_issub))
    ui_sub_inds = find(ui_issub);
    for m = numel(ui_sub_inds):-1:1
        ui_ind = ui_sub_inds(m);
        struc_1 = ui_structs{ui_ind, 2};
        ui_type = ui_types{ui_ind}{2};
        sub_field_val = ui_structs{ui_ind, 3};
        
        [process_pars, ui_structs_tmp] = sub_gui_elements_new(process_pars, struc_1, ui_type);
        
        if ~isempty(sub_field_val)
            for n = 1:numel(sub_field_val)
                process_pars.(struc_1).(sub_field_val{n}{1}) = sub_field_val{n}{2};
                
                if (size(sub_field_val{n}, 2) == 3)
                    if strcmpi(sub_field_val{n}{3}, 'disable')
                        % hide relative element
                        ind_tmp = cellfun(@(x) strcmpi(sub_field_val{n}{1}, x{2}), ui_structs_tmp(:, 3));
                        ui_structs_tmp(ind_tmp, :) = [];
                        if isempty(sub_field_val{n}{2})
                            % if isempty, remove value from relative field
                            process_pars.(struc_1) = rmfield(process_pars.(struc_1), sub_field_val{n}{1});
                        end
                    end
                end
            end
        end
        
        ui_structs = [ui_structs(1:ui_ind-1,:); ui_structs_tmp; ui_structs(ui_ind+1:end, :)];
    end
end

function [process_pars, ui_structs] = sub_gui_elements_new(process_pars, struct_sub, ui_type)

brant_path = fileparts(which('brant'));
def_wb_mask = {fullfile(brant_path, 'template', 'fmaskEPI_V2mm.nii.gz')};

switch(ui_type)
    
    case 'disp_dirs_nii_mask'
        
        process_pars.(struct_sub).mask = def_wb_mask;
        process_pars.(struct_sub).nm_pos = 1;
        process_pars.(struct_sub).filetype = '*.nii';
        process_pars.(struct_sub).dirs = {''};
        process_pars.(struct_sub).is4d = 1;
        
        ui_structs = {...
            {'edit', 'str_nifti'},       'mask',         {struct_sub, 'mask'},             '';...
            {'edit', 'num_short_right'},       'id index',            {struct_sub, 'nm_pos'},               '';...
            {'edit', 'str_filetype_nifti'},       'filetype',           {struct_sub, 'filetype'},             '';...
            {'chb', 'num_bin'},          '4D nifti files (3D if unchecked)',    {struct_sub, 'is4d'},                          '';...
            {'edit', 'disp_dirs_nii'},       'input dirs',   {struct_sub, 'dirs'},                 '';...
            };
    
%     case 'disp_dirs_nii_nomask'
%         
%         process_pars.(struct_sub).nm_pos = 1;
%         process_pars.(struct_sub).filetype = '*.nii';
%         process_pars.(struct_sub).dirs = {''};
%         process_pars.(struct_sub).is4d = 1;
%         
%         ui_structs = {...
%             {'edit', 'num_short_right'},       'id index',            {struct_sub, 'nm_pos'},               '';...
%             {'edit', 'str_filetype_nifti'},       'filetype',           {struct_sub, 'filetype'},             '';...
%             {'chb', 'num_bin'},          '4D nifti files (3D if unchecked)',    {struct_sub, 'is4d'},                          '';...
%             {'edit', 'disp_dirs_nii'},       'input dirs',   {struct_sub, 'dirs'},                 '';...
%             };
    
%     case 'stat_3d_nifti_nomask'
%         
%         process_pars.(struct_sub).nm_pos = 0;
%         process_pars.(struct_sub).filetype = '*.nii';
%         process_pars.(struct_sub).dirs = {''};
%         
%         ui_structs = {...
%             {'edit', 'str_filetype_nifti'},    'filetype',           {struct_sub, 'filetype'},             '';...
%             {'edit', 'str_dir'},       'data dir',   {struct_sub, 'dirs'},                 '';...
%             };
        
    case 'stat_3d_nifti_mask'
        
        process_pars.(struct_sub).mask = def_wb_mask;
        process_pars.(struct_sub).nm_pos = 0;
        process_pars.(struct_sub).filetype = '*.nii';
        process_pars.(struct_sub).dirs = {''};
        
        ui_structs = {...
            {'edit', 'str_nifti'},       'mask',         {struct_sub, 'mask'},             '';...
            ...{'edit', 'num_short_right'},      'id index',  {struct_sub, 'nm_pos'},               '';...
            {'edit', 'str_filetype_nifti'},    'filetype',           {struct_sub, 'filetype'},             '';...
            {'edit', 'str_dir'},       'data dir',   {struct_sub, 'dirs'},                 '';...
            };
        
%     case 'disp_3d_nifti_mask'
%         
%         process_pars.(struct_sub).mask = def_wb_mask;
%         process_pars.(struct_sub).nm_pos = 0;
%         process_pars.(struct_sub).filetype = '*.nii';
%         process_pars.(struct_sub).dirs = {''};
%         
%         ui_structs = {...
%             {'edit', 'str_nifti'},       'mask',         {struct_sub, 'mask'},             '';...
%             {'edit', 'num_short_right'},      'id index',  {struct_sub, 'nm_pos'},               '';...
%             {'edit', 'str_filetype_nifti'},    'filetype',           {struct_sub, 'filetype'},             '';...
%             {'edit', 'disp_dirs_nii'},       'input dirs',   {struct_sub, 'dirs'},                 '';...
%             };
	
% 	case 'disp_3d_nifti_nomask'
%         
%         process_pars.(struct_sub).nm_pos = 0;
%         process_pars.(struct_sub).filetype = '*.nii';
%         process_pars.(struct_sub).dirs = {''};
%         
%         ui_structs = {...
%             {'edit', 'num_short_right'},      'id index',  {struct_sub, 'nm_pos'},               '';...
%             {'edit', 'str_filetype_nifti'},    'filetype',           {struct_sub, 'filetype'},             '';...
%             {'edit', 'disp_dirs_nii'},       'input dirs',   {struct_sub, 'dirs'},                 '';...
%             };
        
    case 'disp_2d_mat'
        
        process_pars.(struct_sub).nm_pos = 0;
        process_pars.(struct_sub).filetype = '*.mat';
        process_pars.(struct_sub).dirs = {''};
        
        ui_structs = {...
            ...{'edit', 'num_short_right'},      'id index',  {struct_sub, 'nm_pos'},               '';...
            {'edit', 'str_filetype_mat'},    'filetype',           {struct_sub, 'filetype'},             '';...
            {'edit', 'str_dir'},       'data dir',   {struct_sub, 'dirs'},                 '';...
            };
	
    case 'disp_2d_txt'
        process_pars.(struct_sub).nm_pos = 0;
        process_pars.(struct_sub).filetype = '*.txt';
        process_pars.(struct_sub).dirs = {''};
        
        ui_structs = {...
            {'edit', 'num_short_right'},      'id index',  {struct_sub, 'nm_pos'},               '';...
            {'edit', 'str_filetype_txt'},    'filetype',           {struct_sub, 'filetype'},             '';...
            {'edit', 'disp_dirs_nii'},       'data dir',   {struct_sub, 'dirs'},                 '';...
            };
        
	case {'stat_2d_txt'}
        
        process_pars.(struct_sub).nm_pos = 0;
        process_pars.(struct_sub).filetype = '*.txt';
        process_pars.(struct_sub).dirs = {''};
        
        ui_structs = {...
            {'edit', 'str_filetype_txt'},    'filetype',           {struct_sub, 'filetype'},             '';...
            {'edit', 'str_dir'},       'data dir',   {struct_sub, 'dirs'},                 '';...
            };
        
%     case 'disp_dirs_only' % dicom
%         
%         process_pars.(struct_sub).nm_pos = 1;
%         process_pars.(struct_sub).dirs = {''};
%         
%         ui_structs = {...
%             {'edit', 'num_short_right'},       'id index',            {struct_sub, 'nm_pos'},               '';...
%             {'edit', 'disp_dirs_nii'},       'input dirs',   {struct_sub, 'dirs'},                 '';...
%             };
        
end